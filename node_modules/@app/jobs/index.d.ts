import { Filter, OrderByDefinition } from 'core/db/dbQueryTypes'
import {
  FindAsapJobsOptions,
  FindScheduledJobsOptions,
  UgcAsapJob,
  UgcScheduledJob,
} from 'services/ugc-runner/runtime/runtimeTypes'
import { JSONInputValue } from 'utils/types'

interface CqlSelectQuery {
  from: CqlFrom
  select: CqlSelect
  distinct?: boolean
  where?: CqlWhere
  having?: CqlHaving
  order?: CqlOrder
  group?: CqlGroup
  limit?: number
  offset?: number
}
declare type CqlFrom = CqlTable | CqlSubQuery
declare type CqlTable = {
  kind: 'table'
  schema: string
  name: string
}
declare type CqlSubQuery = {
  kind: 'sub'
  query: CqlSelectQuery
}
declare type CqlSelect = Record<string, CqlExpr> | undefined
declare type CqlExpr = CqlPlainColumn | CqlExprFn | CqlDynParam | CqlJsonPath | CqlAsterisk
declare type CqlPlainColumn = {
  kind: 'col'
  name: string
  type?: CqlFieldType
}
declare type CqlExprFn = {
  kind: 'fn'
  fn: string
  args: CqlExpr[]
  distinct?: boolean
  type?: CqlFieldType
}
declare type CqlDynParam = {
  kind: 'dyn'
  value: unknown
  type?: CqlFieldType
}
declare type CqlJsonPath = {
  kind: 'json'
  path: CqlDeepPath
  type: CqlFieldType
}
declare type CqlAsterisk = {
  kind: '*'
  type?: undefined
}
declare type CqlFieldType = 'string' | 'number' | 'boolean' | 'date' | 'json'
declare type CqlDeepPath = [string, ...(string | number)[]]
declare type CqlGroup = CqlSelectAlias[]
declare type CqlSelectAlias = string
declare type CqlWhere = Filter<any>
declare type CqlHaving = Filter<any>
declare type CqlOrder = OrderByDefinition<any>
declare type TimeUnit =
  | 'milliseconds'
  | 'seconds'
  | 'minutes'
  | 'hours'
  | 'days'
  | 'weeks'
  | 'months'
  | 'quarters'
  | 'years'
interface UgcJobScheduleParams {
  allowRetry?: boolean
}
export declare function scheduleJobAt(
  ctx: RichUgcCtx,
  startAt: Date,
  url: string,
  params?: JSONInputValue,
  scheduleParams?: UgcJobScheduleParams,
): Promise<string>
export declare function scheduleJobAfter(
  ctx: RichUgcCtx,
  amount: number,
  unit: TimeUnit,
  url: string,
  params?: JSONInputValue,
  scheduleParams?: UgcJobScheduleParams,
): Promise<string>
export declare function scheduleJobAsap(
  ctx: RichUgcCtx,
  url: string,
  params?: JSONInputValue,
  scheduleParams?: UgcJobScheduleParams,
): Promise<string>
export declare function reScheduleFailedAsapJob(_ctx: RichUgcCtx, jobId: number | string): Promise<void>
export declare function cancelJob(ctx: RichUgcCtx, jobId: string): Promise<boolean>
export declare function cancelAsapJob(ctx: RichUgcCtx, jobId: number): Promise<boolean>
export declare function cancelScheduledJob(ctx: RichUgcCtx, jobId: number): Promise<boolean>
export declare function findAsapJobById(ctx: RichUgcCtx, jobId: number): Promise<UgcAsapJob | null>
export declare function findScheduledJobById(ctx: RichUgcCtx, jobId: number): Promise<UgcScheduledJob | null>
export declare function findAsapJobs(ctx: RichUgcCtx, options?: FindAsapJobsOptions): Promise<UgcAsapJob[]>
export declare function findScheduledJobs(
  ctx: RichUgcCtx,
  options?: FindScheduledJobsOptions,
): Promise<UgcScheduledJob[]>

export {}
