import { HeapId } from 'core/heap/heapTypes'
import { QueryParamsOption } from 'lib/chatium-json'
import { Icon } from 'lib/chatium-json/v1'
import { RichUgcAccount } from 'services/ugc-runner/runtime/context/RichUgcCtxAccount'
import {
  UgcAccount,
  UgcAccountSeat as UgcAccountSeat_,
  UgcCreateAccountOptions,
  UgcUpdateAccountSettings,
} from 'services/ugc-runner/runtime/runtimeTypes'

declare type Lang = string
declare type HashMediaType = 'file' | 'video' | 'image' | 'audio'
interface StorageUploadOptions {
  /** upload a non-public file */
  protected?: boolean
  /** allow only these media types (supported: image | video | audio) */
  mediaType?: HashMediaType | HashMediaType[]
  /** allow only these content type pattern(s) */
  contentType?: string | string[]
  /** allow only these file extensions */
  extension?: string | string[]
  /** minimum file size in bytes */
  minBytes?: number
  /** maximum file size in bytes */
  maxBytes?: number
  /** custom auth session authorizing URL expiration time in seconds, default is a week */
  expiresInSeconds?: number
}
declare type AccountUrlFn = {
  accountUrlParams: AccountUrlParams
  (path: string, options?: QueryParamsOption): string
}
interface AccountUrlParams {
  accountName: string
  accountHost: string
  accountPathPrefix: string
  pluginAppInfo?: UgcPluginAppUrlInfo
}
declare enum BalanceType {
  Token = 'Token',
  TokenBurnable = 'TokenBurnable',
}
declare enum BalanceCreditMethod {
  Set = 'Set',
  Add = 'Add',
}
declare enum BalanceTransactionType {
  Debit = 'Debit',
  Credit = 'Credit',
}
interface CurrentAccountBalanceTokenResult {
  total: string
  burnable: string
  regular: string
  burnable_expire_at: Date | null
}
interface AccountBalanceTransaction {
  id: string
  account_id: number
  type: BalanceTransactionType
  balance_type: BalanceType
  app_id: number
  created_at: Date
  balance_change: string
  requested_balance_change: string
  expire_at: Date | null
  credit_method: BalanceCreditMethod | null
  message: string
  data: any
  unique_external_id: string | null
}
interface AccountBalanceTransactionRich extends AccountBalanceTransaction {
  app_slug: string | null
}
declare type LogLevel = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace' | 'unknown'
declare type UgcKvOpts = {
  [key: string]: string | number | undefined
}
declare type LogParams = {
  err?: Error
  kv?: UgcKvOpts
  json?: unknown
  level?: LogLevel
  msg?: string | number
}
declare type LogParamsNoMsg = Omit<LogParams, 'msg'>
declare type AccountAuthType = 'Email' | 'Phone' | 'Multi'
interface UgcPluginAppUrlInfo {
  appSlug: string
  /** path to the application root directory */
  directoryPath: string
}
interface UgcCtxAccount {
  id: number
  name: string
  host: string
  authType: AccountAuthType
  /** @deprecated use host instead */
  externalHost: string | null
  publishedVersion: string | null
  metaHash: string
  pathPrefix: string
}
export declare function getOwnedAccountsForUser(ctx: RichUgcCtx, userId?: HeapId): Promise<RichUgcAccount[]>
export declare function getAccountById(ctx: RichUgcCtx, id: number): Promise<RichUgcAccount>
export declare function findAccountsById(ctx: RichUgcCtx, ids: number[]): Promise<RichUgcAccount[]>
export declare function cloneEntityToAccount(
  userId: string,
  sourceAccountName: string,
  sourceAccountPath: string,
  destAccountName: string,
  destAccountPath?: string,
): Promise<string>
export declare function registerNewAccount(
  ctx: RichUgcCtx,
  name: string,
  options?: UgcCreateAccountOptions,
): Promise<RichUgcAccount>
/**
 * Installs the given application to the given child account
 */
export declare function installAppToChildAccount(
  _ctx: RichUgcCtx,
  targetChildAccountOrId: number | UgcAccount | RichUgcAccount,
  appSlug: string,
): Promise<void>
export declare function updateChildAccountStartApp(
  _ctx: RichUgcCtx,
  targetChildAccountOrId: number | UgcAccount | RichUgcAccount,
  startAppSlug: string | null,
): Promise<void>
export declare function getCurrentAccountSettings(_ctx: RichUgcCtx): Promise<UgcAccount>
export declare function updateCurrentAccountSettings(
  _ctx: RichUgcCtx,
  settings: UgcUpdateAccountSettings,
): Promise<void>
/**
 * Installs the given application to the current account.
 * Can be called only from the application with the appropriate permissions.
 * Doesn't work for the account code itself.
 */
export declare function installApp(ctx: RichUgcCtx, appSlug: string): Promise<void>
/**
 * Uninstalls the given application from the current account.
 * Can be called only from the application with the appropriate permissions.
 * Doesn't work for the account code itself.
 */
export declare function uninstallApp(ctx: RichUgcCtx, appSlug: string): Promise<void>
/**
 * @deprecated
 */
export declare function persistentPlaygroundAccount(
  userId: HeapId,
  name: string,
  title?: string,
  logo?: Icon,
): Promise<UgcAccount | null>
export declare type UgcAccountSeat = UgcAccountSeat_
export declare function listAccountSeats(ctx: RichUgcCtx): Promise<UgcAccountSeat[]>
export declare function createAccountSeat(ctx: RichUgcCtx, userId: string): Promise<void>
export declare function dropAccountSeat(ctx: RichUgcCtx, userId: string): Promise<void>
export declare type GetBalanceResult = CurrentAccountBalanceTokenResult
export declare function getBalance(_ctx: RichUgcCtx): Promise<GetBalanceResult>
export declare function debitBalanceToken(
  _ctx: RichUgcCtx,
  amount: string | number,
  message: string,
  data: any,
  options?: {
    uniqueExternalId?: string | null
  },
): Promise<GetBalanceResult>
export declare function creditBalanceTokenRegular(
  _ctx: RichUgcCtx,
  amount: string | number,
  message: string,
  data: any,
  options?: {
    uniqueExternalId?: string | null
  },
): Promise<GetBalanceResult>
export declare function creditBalanceTokenBurnable(
  _ctx: RichUgcCtx,
  amount: string | number,
  method: 'add' | 'set',
  expireAt: Date,
  message: string,
  data: any,
  options?: {
    uniqueExternalId?: string | null
  },
): Promise<GetBalanceResult>
export declare function findBalanceTransactions(_ctx: RichUgcCtx): Promise<Array<AccountBalanceTransactionRich>>

export {}
